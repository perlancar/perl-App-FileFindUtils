#!perl

use strict;
use warnings;

# AUTHORITY
# DATE
# DIST
# VERSION

use Getopt::Long;

# ABSTRACT: Print the most something (oldest/newest/largest/smallest/etc) file(s) in a directory, with some options

=head1 SYNOPSIS

 % oldest-file-in [options] <dir>
 % newest-file-in [options] <dir>
 % smallest-file-in [options] <dir>
 % largest-file-in [options] <dir>
 % frontmost-file-in [options] <dir>
 % hindmost-file-in [options] <dir>
 % shortest-filename-in [options] <dir>
 % longest-filename-in [options] <dir>

 % oldest-subdir-in [options] <dir>
 % newest-subdir-in [options] <dir>
 % frontmost-subdir-in [options] <dir>
 % hindmost-subdir-in [options] <dir>
 % shortest-subdirname-in [options] <dir>
 % longest-subdirname-in [options] <dir>

 % sort-files-in [options] <dir>
 % sort-subdirs-in [options] <dir>

 % oldest-file-in-this-dir [options]
 % oldest-file-here        [options]
 % newest-file-in-this-dir [options]
 % newest-file-here        [options]
 % smallest-file-in-this-dir [options]
 % smallest-file-here        [options]
 % largest-file-in-this-dir [options]
 % largest-file-here        [options]
 % frontmost-file-in-this-dir [options]
 % frontmost-file-here        [options]
 % hindmost-file-in-this-dir [options]
 % hindmost-file-here        [options]
 % shortest-filename-in-this-dir [options]
 % shortest-filename-here        [options]
 % longest-filename-in-this-dir [options]
 % longest-filename-here        [options]

 % oldest-subdir-in-this-dir [options]
 % oldest-subdir-here        [options]
 % newest-subdir-in-this-dir [options]
 % newest-subdir-here        [options]
 % smallest-subdir-in-this-dir [options]
 % smallest-subdir-here        [options]
 % largest-subdir-in-this-dir [options]
 % largest-subdir-here        [options]
 % frontmost-subdir-in-this-dir [options]
 % frontmost-subdir-here        [options]
 % hindmost-subdir-in-this-dir [options]
 % hindmost-subdir-here        [options]
 % shortest-subdirname-in-this-dir [options]
 % shortest-subdirname-here        [options]
 % longest-subdirname-in-this-dir [options]
 % longest-subdirname-here        [options]

 % sort-files-in-this-dir [options]
 % sort-files-here        [options]
 % sort-subdirs-in-this-dir [options]
 % sort-subdirs-here        [options]

See examples in L</EXAMPLES>.


=head1 DESCRIPTION

Basically these utilities sort files in a directory (or directory tree)
according to some criteria and print the top result(s). They can be done in a
Unix shell using the traditional idiom:

 % find ... | sort ... | top ...
 % ls ... | sort ... | top ...

except that:

=over

=item 1. Shorter names for convenience

=item 2. Number of results of number of ranks

They allows you to specify returning certain number of results (C<-n>) or
certain number of ranks (C<-N>); for example, if there are two files that are
the longest then C<-n1> will only return one of them while C<-N1> will return
both of them since the two files both rank at #1.

=item 3. Perl stuffs

They allow you to specify Perl code or L<Sort::Sub> for sorting, and Perl code
for performing action on the results.

Some notes:

Directories are ignored, except when utility names being called are
C<*-subdir-*> or C<*-subdirs-*>, in which case files are ignored instead.


=head1 OPTIONS

C<*> marks required options.

=head2 -n=INT

Return at most the specified number of results. Default is 1. -1 means
unlimited. See also L<-N|/"-N=INT"> for more details.

=head2 -N=INT

Return at most the specified number of I<ranks>. -1 means unlimited. See also
L<-n|/"-n=INT">. Useful when there are multiple items of the sort order (i.e.
the same size, name length, modification time, etc). For example, given these
files and their sizes:

 name   size
 ----   ----
 z1     400
 z2     600
 a      1000
 b      1000
 c      2000
 d      2000

when requesting C<largest-file -n1>, only C<c> (or C<d>) will be returned. But
with C<largest-file -N1> then both C<c> and C<d> will be returned. When
requesting C<largest-file -n2>, C<c> and C<d> will be returned. When requesting
C<largest-file -N2>, these will be returned: C<c>, C<d>, C<a>, C<b>. When
requesting C<largest-file -N3>, these will be returned: C<c>, C<d>, C<a>, C<b>,
C<z2>.

=head2 --recursive, -R

Enable recursive mode.

=head2 --eval=CODE, -e

For each result, call specified Perl code. Perl code will be called in C<main>
package, without L<strict> and L<warnings>. These variables will be available
for the code: C<$_> (the filename, with directory prefix), C<$dir> (only the
directory name, which will be always be C<.> when not in recursive mode),
C<$file> (only the filename, without the directory prefix).

=head2 --sort=WHICH*

Sort method. Valid value include: C<name> (filename by ASCII comparison, in
ascending order), C<-name> (filename by ASCII comparison, in descending order),
C<size> (file size in bytes, in ascending order), C<-size> (file size in bytes,
in descending order), C<mtime>

A sort method will be chosen (without the ability to change it) depending on the
utility name being called:

 name                 default sort
 ----                 ------------
 oldest-*             mtime
 newest-*             -mtime
 smallest-*           size
 largest-*            -size
 frontmost-*          name
 hindmost-*           -name
 shortest-filename-*  namelen
 longest-filename-*   -namelen

=head2 --filter=CODE

Provide custom filtering with Perl code. Perl code will be called in C<main>
package, without L<strict> and L<warnings>. These variables will be available
for the code: C<$_> (the filename, with directory prefix), C<$dir> (only the
directory name, which will be always be C<.> when not in recursive mode),
C<$file> (only the filename, without the directory prefix).

=head1 EXAMPLES


=head1 TODO

Utilities: deepest-file, shallowest-file

Options: --max-deptH

=head1 SEE ALSO
